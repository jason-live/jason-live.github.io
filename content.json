{"meta":{"title":"Hexo","subtitle":null,"description":null,"author":"JasonLive","url":"https://jason-live.github.io"},"pages":[{"title":"404 Not Found：该页无法显示","date":"2017-12-28T00:36:52.000Z","updated":"2017-12-27T05:49:35.000Z","comments":false,"path":"/404.html","permalink":"https://jason-live.github.io//404.html","excerpt":"","text":""},{"title":"关于","date":"2018-01-12T00:30:34.000Z","updated":"2018-01-12T00:30:34.000Z","comments":false,"path":"about/index.html","permalink":"https://jason-live.github.io/about/index.html","excerpt":"","text":"123456789101112131415161718192021222324252627282930&#123; name: 'jason' age: 29, gender: '男', profession: 'Web Developer &amp; Designer', experience: '7年', address: '江苏省南京市', education: '专科', github: 'https://github.com/jason-live', blog: 'https://jason-live.github.io/', email: '15161461631@139.com', description: '致力于前端开发与前端用户体验设计', skills: [ ['Html', 'Javascript', 'CSS', 'ES6', 'Node'], ['Webpack', 'Gulp', 'Parcel', 'Rollup'], ['less','sass'], ['git', 'git-flow', 'github'], ['react', 'angular', 'vue'], ['redux', 'immutablejs', 'rxjs'], ['node', 'jave'], ['express', 'koa', 'spring', 'springmvc', 'mybatis'], ], devTools: [ ['Sublime Text', 'Visual Studio Code', 'Atom'], ['Chrome DevTools', 'Fiddler'], ['iterm2'], ] &#125;"},{"title":"书单","date":"2017-12-28T00:36:19.000Z","updated":"2017-12-27T05:49:35.000Z","comments":false,"path":"books/index.html","permalink":"https://jason-live.github.io/books/index.html","excerpt":"","text":""},{"title":"分类","date":"2017-12-28T00:32:59.000Z","updated":"2017-12-28T00:33:33.000Z","comments":false,"path":"categories/index.html","permalink":"https://jason-live.github.io/categories/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2017-12-28T03:38:52.000Z","updated":"2017-12-28T03:38:52.000Z","comments":false,"path":"links/index.html","permalink":"https://jason-live.github.io/links/index.html","excerpt":"","text":""},{"title":"开源项目","date":"2017-12-28T00:42:05.000Z","updated":"2017-12-28T00:42:05.000Z","comments":false,"path":"repository/index.html","permalink":"https://jason-live.github.io/repository/index.html","excerpt":"","text":""},{"title":"标签","date":"2017-12-28T00:32:34.000Z","updated":"2017-12-28T00:35:20.000Z","comments":false,"path":"tags/index.html","permalink":"https://jason-live.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"webpack全家桶+react全家桶项目实战[1]-项目准备","slug":"webpack-react-01","date":"2018-02-26T01:29:46.000Z","updated":"2018-02-26T01:31:42.212Z","comments":true,"path":"2018/02/26/webpack-react-01/","link":"","permalink":"https://jason-live.github.io/2018/02/26/webpack-react-01/","excerpt":"","text":"项目开始前，我们先聊一聊关于项目的一些说明。该项目起始于2017年初，当时公司主要技术栈为gulp+angular，鉴于react的火热的生态，在公司决定研发bss管理系统时选用react开发，目的也是为react native打下基础，以解决后期公司大前端技术栈的逐步成熟。（当时没有选择vue开发的主要原因是weex生态还不够特别成熟），既然决定换新，项目的构建也跟着一起换，从gulp转向火热的webpack，持续大半年的更新迭代，我们将构建模块逐步从项目中抽离出来，把构建模块作为npm包单独管理，完成和项目代码解耦，于是就有了后面我们要说的wci-build构建模块包和wci-cli项目脚手架。 我们要做什么技术栈项目采用前后端分离的形式，后端选用Maven+SpringClould全家桶开发，前端选用webpack+react全家桶开发，前后端全部采用包管理工具完全解决项目依赖管理的难题，版本管理采用git，前后端通过json交互，swgger管理接口文档，接口全部遵循restful规范。由于本文面向社区开放，故本文中不涉及公司业务层的代码，本文全部代码均为最新编写，我们以一个旅游管理系统的三个模块为大家演示项目（登陆登出、用户模块、景点模块）。为了快速开展，本文涉及的后端代码直接采用Java的SSM框架搭建，源码也将为大家奉上。朋友们也可以使用mock模拟接口数据。后期我们在演示nodejs+espress时将接口代码全部转为node形式。 准备因本文不是讲解基础，故大家在敲代码前，还需要具备一定的前端基础，部分如下 html、css、javascript基础知识 es6基础知识 react基础知识 了解什么是webpack、babel、redux、react-router、nodejs、npm 熟悉蚂蚁金服ant design 熟悉less基本使用 解决什么问题本项目集成了最新的react16、react-router4、redux，同时可以选择性集成antd|antd mobile，在解决繁琐的架构配置工作外，还解决了以下问题 通用问题 支持开发效率更高的ES6编写代码。 拆分开发、测试、生产环境，完成从开发到上线的所有工作。 开发环境包含热替换，本地IP、端口可配置，接口可配置，微服务模块可配置 测试环境包含代码压缩、合并、css抽离、公共组件抽离、代码添加hash、测试版本后缀 生产环境包含代码压缩、合并、css抽离、公共组件抽离、代码添加hash、生产版本后缀（和测试代码完全一样，只缺少测试版本号） 支持自定义添加webpack loader 其他问题 目前大型项目后端多采用微服务架构，API接口在开发、测试、生产环境下来回切换，需要频繁修改代码。解决方案：通过配置文件的方式统一配置项目模块接口 项目模块在分拆开发的过程中css命名冲突，导致代码维护性较差。解决方案：构建工具预加载css时自动化添加hash，使css代码模块化 不同开发人员，不同的代码习惯造成项目代码难以维护。解决方案：在代码编写、构建、版本管理三个方向加入代码规范校验（airbnb规范） 在同时开发多个系统的时候，构建业务模块在不同的项目都存在，当需要修改配置或者优化构建方案的时候，需要修改多个项目的配置。解决方案：抽离构建模块，采用npm形式依赖。 还有什么问题要解决虽然经过大半年迭代，但我们还需要在实际项目开发中支持更多的个性化需求 cdn自动化 更加完善的持续集成 单元测试，包括代码，交互测试 mock数据，实现前后端真正0接触 … 希望大家在开发过程中遇到任何问题，希望可以给我们留言，我们会不断优化项目。未来，我们还会加入mobx、rxjs、immutablejs、GraphQL等，也希望在和大家的探讨中，持续进步。 项目准备本项目基础环境必须依赖nodejs和npm,未安装的朋友可以去官网自行安装，安装教程这里不详细说明，安装完成后使用如下命令，查看是否安装成功。 12node -vnpm -v ####初始化项目本项目我们使用wci-cli脚手架初始化项目 全局安装wci-cli 1npm install -g wci-cli 创建项目wci-cli 脚手架可以创建三种项目，分别是1.纯净的react项目 2.包含antd的react项目 3.包含antd-mobile的react项目，命令如下 1wci new myapp 执行命令后，命令行会提示是否需要安装antd以及选择antd类型，即可完成项目初始化，如下 项目目录 1234567891011121314151617181920212223myapp├── app // 项目业务代码│ ├── assets // 静态文件目录（图片、字体等）│ ├── script // js代码目录│ │ ├── actions // redux action目录│ │ ├── componets // react 无状态组件目录│ │ ├── containers // react 业务代码│ │ ├── reducers // redux reducer目录│ │ ├── util // 工具包目录│ │ │ ├── theme.js // antd自定义样式文件│ │ ├── Home.js // 首页│ │ ├── home.less // 首页样式│ ├── styles // 全局样式目录│ ├── index.js // 项目入口文件│ ├── index.tpl.html // 项目html模版├── node_modules // 依赖包目录├── .babelrc // babel配置文件├── .eslintrc // eslint代码校验配置文件├── .gitignore├── package.json├── README.md├── wci.json // wci项目配置文件（主要配置一些开发、测试、生产环境的信息）└── webpack.js // webpack自定义配置文件 执行如下命令，运行开发环境 12cd myappnpm run start 如上图，我们的项目已经跑起来了… 测试、发布因我们需要保证测试代码和生产代码必须保持一致，所有在实际项目中，我们可以运行如下命令构建代码 12npm run test // 测试环境打包npm run dist // 生产环境打包 测试代码 生产代码 到这里，我们已经完成项目前期开发的所有准备工作，接下来，我们一起开始撸代码吧 项目结束后，我会为大家奉上两篇彩蛋，分别是 1. 一步步搭建webpack前端构建工具并抽成npm单独模块 2. 一步步构建自己的npm开发包并且以一个真实例子演示（开发一个命令行生成文件夹结构的小工具）","categories":[{"name":"react系列教程","slug":"react系列教程","permalink":"https://jason-live.github.io/categories/react系列教程/"}],"tags":[{"name":"webpack","slug":"webpack","permalink":"https://jason-live.github.io/tags/webpack/"},{"name":"react","slug":"react","permalink":"https://jason-live.github.io/tags/react/"},{"name":"ant design","slug":"ant-design","permalink":"https://jason-live.github.io/tags/ant-design/"},{"name":"前端工程化","slug":"前端工程化","permalink":"https://jason-live.github.io/tags/前端工程化/"}]},{"title":"2018我的学习分享路线","slug":"essays-2018-01","date":"2018-02-04T05:08:09.000Z","updated":"2018-02-04T05:35:53.414Z","comments":true,"path":"2018/02/04/essays-2018-01/","link":"","permalink":"https://jason-live.github.io/2018/02/04/essays-2018-01/","excerpt":"","text":"2017年底开始写自己的博客，目的除了记录日常工作中的笔记外，更重要的是把自己的学习和工作经验分享给大家，希望大家给予指正，也希望通过我的文章，能给大家带来更多的帮助。进入2018年，博主将从基础学习、前端实战、后端实战等几个方向更新学习笔记，希望能完成按周更新的速度，为大家奉上50几篇好的文章。 基础 html、css、javascript基础笔记本模块主要为前端最基础的内容，但我们不说那些大家都明白的，我们只写大家容易忽略又在开发过程中比较重要的内容，在本模块中，我们将以javascript为重点，css、html多少会提及。毕竟，想学好前端，js基础是必须的。js我们主要以《javascript高级程序设计》一书为依据，按章节介绍。重点是js的面向对象编程。 javascript设计模式本模块我们将深入介绍js在日常开发中涉及到的设计模式，培养对代码封装、抽象的思路，提高自身代码质量 nodejs基础本模块我们将nodejs的原生API，通过一个个例子让大家理解nodejs使用，毕竟现在做前端开发，不会nodejs是做不好前端的 linux基础笔记本模块我们将简单介绍linux在日常开发中的使用，一些基本的文件、网络等操作和一些常用的环境部署 前端 react系列学习笔记本模块，我们将学习react基础，使用react、redux、react-router搭建开发环境并完成一个小的demo。 涉及内容：react生命周期、react常用技巧、redux原理解析、项目架构设计 react native系列学习笔记本模块，我们将学习react native基础，使用react native、redux、react-router搭建开发环境并完成一个小的demo vue系列全家桶学习笔记本模块，我们将学习vue基础，使用vue、redux、vue-router搭建开发环境并完成一个小的demo webpack系列学习笔记本模块，我们将学习webpack构建工具，一步步带着大家完成一个大型项目的构建脚手架，包含开发环境的热更新、less预编译、集成react|vue全家桶、配置业务分离、三层代码校验（开发、发布、git提交）、开发工具配置、集成蚂蚁金服的antd-design、生产环境的代码压缩、代码按需加在、代码版本控制、服务端渲染、业务模块拆分、生产环境docker化等功能 electron系列学习笔记本模块，我们将使用electron把之前开发的demo改为c/s架构的系统 其他本模块，我们将介绍一些前端开发过程中会涉及的一些其他内容，譬如TypeScript、GraphQL、mobx、rxjs等内容 后端 nodejs系列学习笔记本模块，我们将使用koa|express、mysql|mongodb 为之前开发的前端提供服务端的支持，完成前后端的对接 java系列学习笔记本模块，我们将使用springMVC+spring+mybatis搭建后端开发环境，后期更换springboot，springclould等，我们还会使用redis等逐步完善项目，使项目更加趋于集群，高并发方向构建 其他本模块，我们将介绍一些后端其他的内容 其他本模块，相对来说有些杂，我们会穿插的记录一些日常开发中的各个方面 涉及内容：git、github、jenkins、npm、sublime、atom、vscode、docker、mac全栈环境配置、各技术官网推荐、大牛博客推荐等 希望大家在2018年事事如意，事业进步，PS：少年贪玩，青年迷恋爱情，壮年汲汲于成名成家，暮年自安于自欺欺人。人寿几何，顽铁能炼成的精金，能有多少？我们曾如此渴望命运的波澜,到最后才发现,人生最曼妙的风景,竟是内心的淡定与从容。","categories":[{"name":"生活随笔系列","slug":"生活随笔系列","permalink":"https://jason-live.github.io/categories/生活随笔系列/"}],"tags":[{"name":"随笔","slug":"随笔","permalink":"https://jason-live.github.io/tags/随笔/"}]},{"title":"npm命令行工具学习笔记（1）– 我的第一个命令","slug":"npm-command-01-md","date":"2018-01-11T14:35:11.000Z","updated":"2018-01-11T14:41:03.000Z","comments":true,"path":"2018/01/11/npm-command-01-md/","link":"","permalink":"https://jason-live.github.io/2018/01/11/npm-command-01-md/","excerpt":"","text":"在开发大型项目的时候，有时候在代码解耦层面会出现很多通用且无耦合性的组件、模块包等，这时需要将这些公共的部分提取出来在几个或者开源出来。本文就为介绍如何开发一个公共模块包 开发公共模块包需要开发者掌握几个概念 nodejs命令行是如何工作的 npm包是如何发布的 github是如何使用的 如何更好的管理开发版本 因本文不是基础教程，故在这里不介绍nodejs、npm、github的基础使用方式 npm包结构npm包实际是一个存档文件，即一个目录直接打包为.zip或tar.gz格式的文件，安装后解压还原为目录。完全符合CommonJS规范的包目录应该包含如下这些文件12345package.json : 包描述文件。bin: 用于存放可执行二进制文件的目录。lib：用于存放javascript代码的目录。doc：用于存放文档的目录。test: 用于存放单元测试用例的代码。 我们开发npm包模块的时候，就可以按照以上目录结构，进行开发 正式开始前的准备 注册github 虽然npm包开发版本管理可以不依赖github，但目前社区基本采用github+npm同时管理代码的方式，注册好自己的github后，在github上创建一个项目，博主在这里以wci-cli为例说明 注册npm 可以通过官网注册，也可以通过命令行注册，命令行注册方式我们后面会说明 初始化项目 初始化npm项目 在github创建项目wci-cli,使用git clone下载至本地，进入wci-cli项目，使用下述命令，在命令行一键回车到底 1npm init 生成package.json文件，内容如下1234567891011&#123; &quot;name&quot;: &quot;wci-cli&quot;, &quot;version&quot;: &quot;1.0.0&quot;, &quot;description&quot;: &quot;&quot;, &quot;main&quot;: &quot;index.js&quot;, &quot;scripts&quot;: &#123; &quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot; &#125;, &quot;author&quot;: &quot;jasonlive&quot;, &quot;license&quot;: &quot;ISC&quot;&#125; 修改package.json文件如下1234567891011121314151617181920212223&#123; &quot;name&quot;: &quot;wci-cli&quot;, ## 项目名称 &quot;version&quot;: &quot;1.0.0&quot;, ## 项目版本 &quot;description&quot;: &quot;webpack、react、redux、react-router、antd&quot;, ## 项目描述 &quot;main&quot;: &quot;index.js&quot;, ## 入口文件 &quot;scripts&quot;: &#123; &quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot; &#125;, ## 项目可执行脚本 &quot;repository&quot;: &#123; &quot;type&quot;: &quot;git&quot;, &quot;url&quot;: &quot;git+https://github.com/jason-live/wci-cli.git&quot; &#125;, ## 项目代码存放目录，一般为github目录地址 &quot;author&quot;: &quot;jasonlive&quot;, ## 项目拥有着 &quot;license&quot;: &quot;ISC&quot;, &quot;bin&quot;: &#123; &quot;wci&quot;: &quot;./bin/wci&quot; &#125;, ## 项目可执行bash命令 &quot;bugs&quot;: &#123; &quot;url&quot;: &quot;https://github.com/jason-live/wci-cli/issues&quot; &#125;, &quot;homepage&quot;: &quot;https://github.com/jason-live/wci-cli#readme&quot;, ## 项目说明路径，一般为github上的README.md文件 &quot;dependencies&quot;: &#123;&#125; ## 项目依赖&#125; 在项目目录下创建如下文件|文件夹123456bin ## 可执行文件目录lib ## 打包的代码目录src ## 源码目录doc ## 文档目录boilerplates ## 模版文件目录.gitignore ## 忽略文件，npm会默认识别这个文件 我的第一个命令在bin目录下，新建wci文件，修改文件权限chmod 755 wci，加入如下代码：12345678#!/usr/bin/env nodeconsole.log(&apos;hello world&apos;);if (process.argv.slice(2).join(&apos;&apos;) === &apos;-v&apos;) &#123; console.log(&apos;wci-cli: &apos; + require(&apos;../package&apos;).version); return;&#125; 保存提交至github，提交至npm，文章前面提到注册npm可以两种方式，因博主之前注册过npm账号，故这里采用npm login方式12345npm loginUsername: jasonlivePassword:Email: (this IS public) 15161461631@139.comLogged in as jasonlive on https://registry.npmjs.org/. 填写用户名、密码、邮箱，登录后，使用npm who am i查看是否登录成功，使用npm publish，即可将代码提交至npm 使用命令1npm i -g wci-cli ## 从npm上安装自己的npm包 显示安装成功，使用wci|wci -v出现如下提示，说明可以使用讲到这里，我们之前新建的项目目录结构大部分还未使用，我们将在后续文章中继续为大家讲解，并带着大家一步步构建一个可以使用的npm命令行工具","categories":[{"name":"npm系列教程","slug":"npm系列教程","permalink":"https://jason-live.github.io/categories/npm系列教程/"}],"tags":[{"name":"wci-cli","slug":"wci-cli","permalink":"https://jason-live.github.io/tags/wci-cli/"},{"name":"npm","slug":"npm","permalink":"https://jason-live.github.io/tags/npm/"}]},{"title":"hexo 个人博客工具使用教程（3）-- pure主题个性化配置","slug":"hexo-03","date":"2017-12-28T04:44:42.000Z","updated":"2018-01-11T14:32:10.000Z","comments":true,"path":"2017/12/28/hexo-03/","link":"","permalink":"https://jason-live.github.io/2017/12/28/hexo-03/","excerpt":"","text":"npm命令行工具学习笔记（1）– 我的第一个命令前两篇文章我们简要描述了hexo的使用方法，并简单介绍了hexo主题pure的部署方式，本文针对pure进行详细讲解，因pure官方文档对配置信息描述的不是很清楚，所以博主在这里也研究了很久，基本完成了搭建个人博客的需求。本文将从整个页面来主次顺序来一步步配置 国际化 hexo默认是英文的，需要改成中文模式，在/{项目目录}/-config.yml修改 1language: zh-CN 个人信息 左边顶部个人简介–这部分区域的配置在主题目录的_config.yml里面配置 /{项目目录}/themes/pure/-config.yml 12345678enabled: true # 是否开启个人简介avatar: images/avatar_jason.jpg # 个人头像gravatar: # 谷歌邮箱，如果设置了这个，将默认显示谷歌头像author: Jason # 姓名author_title: Web Developer &amp; Designer # 简介author_description: 个人简介。location: 南京, 中国 # 地区follow: https://github.com/jason-live 菜单列表 个人信息下面的菜单列表，默认的只有首页和归档可以点击，其余点击均为404页面，博主在这里卡壳了很久才找到配置的方法 找到/{项目目录}/themes/pure 下的_source文件夹 拷贝_source下的所有文件到/{项目目录}/source文件夹下 重启项目，菜单列表下的所有链接就可以点击了 快速链接 菜单列表下面的部分，这部分配置需要/{项目目录}/themes/pure/-config.yml和/{项目目录}/-config.yml两个文件同时配置 /{项目目录}/-config.yml 1author: JasonLive /{项目目录}/themes/pure/-config.yml 12345social: links: github: https://github.com/jason-live # 你的github地址 rss: atom.xml link_tooltip: true # 是否显示链接的tooltip 打赏 页面底部赏字的配置，有兴趣的同学可以配置，也可自行关闭，/{项目目录}/themes/pure/-config.yml 12345678910donate: enable: true # 关闭打赏 weipay: image: images/donate/weipay.jpg qrcode: images/donate/mywechatpay.jpg title: 微信支付 alipay: image: images/donate/alipay.jpg qrcode: images/donate/myalipay.jpg title: 支付宝 分享 文章底部的分享配置，分别可以配置PC和移动端不同的分享，/{项目目录}/themes/pure/-config.yml 12345# weibo,qq,qzone,wechat,tencent,douban,diandian,facebook,twitter,google,linkedinshare: enable: true # 是否启用分享 sites: weibo,qq,wechat,facebook,twitter # PC端显示的分享图标 mobile_sites: weibo,qq,wechat,facebook,twitter # 移动端显示的分享图标 评论 评论系统需要自行启用，博主选择的为livere，首先需要去livere官网注册，拿到注册的id后，/{项目目录}/themes/pure/-config.yml 配置以下信息 12345678910111213141516# Comment# Gitment# Introduction: https://imsun.net/posts/gitment-introduction/comment: type: livere # 启用哪种评论系统 disqus: # enter disqus shortname here youyan: uid: 1783844 # enter youyan uid livere: uid: MTAyMC8zMjczOC85Mjk5 # enter youyan uid gitment: githubID: repo: ClientID: ClientSecret: lazy: false 其他配置 豆瓣书单 123456789# douban 豆瓣书单Api: https://developers.douban.com/wiki/?title=book_v2 图书books: https://api.douban.com/v2/book/user/jason-live/collections?start=0&amp;count=100 个人书单列表douban: user: jason-live # 豆瓣用户名 start: 0 # 从哪一条记录开始 count: 100 # 获取豆瓣书单数据条数 开启文章统计 1234postCount: enable: true wordcount: true # 文章字数统计 min2read: true # 阅读时长预计 个人知识技能 123456skills: Git: ★★★★☆ webpack、rullup: ★★★★★ Javascript: ★★★★☆ HTML+CSS: ★★★★☆ Javs: ★★★☆☆ 个人标签 123456labels: - 前端开发 - 前端架构 - Web前端 - java开发者 - 强迫症患者 写作 之所以把写作放在这里，是因为每个主题都有各种自己的配置方式，配合hexo官方给出的命令，一并说明 1hexo new [layout] &lt;title&gt; layout说明 布局 路径 备注 post source/_posts 标准模式 page source draft source/_drafts 草稿模式 生成静态文件 1hexo generate // hexo g 部署 1hexo deploy // hexo d 发表草稿 刚刚提到了 Hexo 的一种特殊布局：draft，这种布局在建立时会被保存到 source/_drafts 文件夹，您可通过 publish 命令将草稿移动到 source/_posts 文件夹，该命令的使用方式与 new 十分类似，您也可在命令中指定 layout 来指定布局。 1hexo publish [layout] &lt;title&gt;","categories":[{"name":"个人博客搭建系列","slug":"个人博客搭建系列","permalink":"https://jason-live.github.io/categories/个人博客搭建系列/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://jason-live.github.io/tags/hexo/"}]},{"title":"hexo 个人博客工具使用教程（2）-- 选择一个主题","slug":"hexo-02","date":"2017-12-28T01:52:46.000Z","updated":"2017-12-28T02:01:40.000Z","comments":true,"path":"2017/12/28/hexo-02/","link":"","permalink":"https://jason-live.github.io/2017/12/28/hexo-02/","excerpt":"","text":"选择一个主题hexo提供了很多主题供用户使用，开发者可以在主题中选择自己喜欢的主题。在这里我们选用pure作为示例，一一讲解hexo搭配主题的使用步骤 安装主题12cd &#123;项目目录&#125;git clone https://github.com/cofess/hexo-theme-pure.git themes/pure 修改{项目目录}/_config.yml文件，将theme: landscape 修改为：theme: pure 更新主题12cd themes/puregit pull 启动1hexo server 打开 http://localhost:4000/ 即可看见pure主题默认界面 集成github，让你的博客飞起来目前我们已经可以在本地看到我们自己的博客了，接下来就是集成github，让我们的博客飞起来 1.安装hexo-deployer-git插件1npm install --save hexo-deployer-git 2. 在全局配置文件_config.yml里配置以下代码 github 使用这里就不多说了，个人认为每个开发者都应该学会使用github。在自己的github账号里创建一个项目，项目名必须是你的账号名+.github.io，例如：facebook.github.io 1234deploy: type: git repo: &#123;你的git地址&#125; branch: master 3. 构建项目1hexo generate 4. 部署网站1hexo deploy 5. 查看博客 浏览器打开https://{你的github账号ID}.github.io/ 即可查看自己的博客啦","categories":[{"name":"个人博客搭建系列","slug":"个人博客搭建系列","permalink":"https://jason-live.github.io/categories/个人博客搭建系列/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://jason-live.github.io/tags/hexo/"}]},{"title":"hexo 个人博客工具使用教程（1）-- hexo部署","slug":"hexo-01","date":"2017-12-28T01:20:33.000Z","updated":"2017-12-28T01:53:37.000Z","comments":true,"path":"2017/12/28/hexo-01/","link":"","permalink":"https://jason-live.github.io/2017/12/28/hexo-01/","excerpt":"","text":"hexo中文官网 什么是hexo快速、简洁且高效的博客框架,只需一条指令即可部署到 GitHub Pages, Heroku 或其他网站。Hexo 支持 GitHub Flavored Markdown 的所有功能，甚至可以整合 Octopress 的大多数插件。适合所有互联网从业人员搭建自己的博客网站 快速开始12345npm install hexo-cli -g // 全局安装hexo脚手架hexo init blog // 初始化一个hexo项目cd blog // 进入项目npm install // 初始化依赖包hexo server //启动 环境基础hexo环境依赖于nodejs和git，在安装hexo前确保电脑上已经安装nodejs和git环境，这里不再详细说明node和git的安装，具体可以在网上google相关技术博文初始化项目1hexo init &#123;项目名&#125; 初始化一个hexo项目，进入项目目录12345678.├── _config.yml├── package.json├── scaffolds├── source| ├── _drafts| └── _posts└── themes _config.yml 网站的 配置 信息，您可以在此配置大部分的参数 package.json 应用程序的信息 scaffolds 模版 文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。Hexo的模板是指在新建的markdown文件中默认填充的内容。例如，如果您修改scaffold/post.md中的Front-matter内容，那么每次新建一篇文章时都会包含这个修改。 source 资源文件夹是存放用户资源的地方。除 posts 文件夹之外，开头命名为 (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件会被拷贝过去。 themes 主题 文件夹。Hexo 会根据主题来生成静态页面。 配置config.yml 是hexo全局配置文件，hexo每个thems都会有一个config.yml，这个我们后面再说。以下内容摘自官网网站 参数 描述 title 网站标题 subtitle 网站副标题 description 网站描述 author 您的名字 language 网站使用的语言 timezone 网站时区。Hexo 默认使用您电脑的时区。时区列表。比如说：America/New_York, Japan, 和 UTC 。 其中，description主要用于SEO，告诉搜索引擎一个关于您站点的简单描述，通常建议在其中包含您网站的关键词。author参数用于主题显示文章的作者。 网址 参数 描述 默认值 url 网址 root 网站根目录 permalink 文章的 永久链接 格式 :year/:month/:day/:title/ permalink_defaults 永久链接中各部分的默认值 如果您的网站存放在子目录中，例如 http://yoursite.com/blog，则请将您的 url 设为 http://yoursite.com/blog 并把 root 设为 /blog/。 目录 参数 描述 默认值 source_dir 资源文件夹，这个文件夹用来存放内容。 source public_dir 公共文件夹，这个文件夹用于存放生成的站点文件。 public tag_dir 标签文件夹 tags archive_dir 归档文件夹 archives category_dir 分类文件夹 categories code_dir Include code 文件夹 downloads/code i18n_dir 国际化（i18n）文件夹 :lang skip_render 跳过指定文件的渲染，您可使用 glob 表达式来匹配路径。 如果您刚刚开始接触Hexo，通常没有必要修改这一部分的值。 文章 参数 描述 默认值 new_post_name 新文章的文件名称 :title.md default_layout 预设布局 post auto_spacing 在中文和英文之间加入空格 false titlecase 把标题转换为 title case false external_link 在新标签中打开链接 true filename_case 把文件名称转换为 (1) 小写或 (2) 大写 0 render_drafts 显示草稿 false post_asset_folder 启动 Asset 文件夹 false relative_link 把链接改为与根目录的相对位址 false future 显示未来的文章 true highlight 代码块的设置 默认情况下，Hexo生成的超链接都是绝对地址。例如，如果您的网站域名为example.com,您有一篇文章名为hello，那么绝对链接可能像这样：http://example.com/hello.html，它是绝对于域名的。相对链接像这样：/hello.html，也就是说，无论用什么域名访问该站点，都没有关系，这在进行反向代理时可能用到。通常情况下，建议使用绝对地址。 分类 &amp; 标签 参数 描述 默认值 default_category 默认分类 uncategorized category_map 分类别名 tag_map 标签别名 日期 / 时间格式 参数 描述 默认值 date_format 日期格式 YYYY-MM-DD time_format 时间格式 H:mm:ss 分页 参数 描述 默认值 per_page 每页显示的文章量 (0 = 关闭分页功能) 10 pagination_dir 分页目录 page 扩展 参数 描述 theme 当前主题名称。值为false时禁用主题 deploy 部署部分的设置","categories":[{"name":"个人博客搭建系列","slug":"个人博客搭建系列","permalink":"https://jason-live.github.io/categories/个人博客搭建系列/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://jason-live.github.io/tags/hexo/"}]}]}